<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">


    <!--开启controller扫描-->
    <context:component-scan base-package="com.lagou.edu.controller" />

    <!--配置视图解析器（springmvc的组件）-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--配置前缀-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <!--配置后缀-->
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--自动注册最合适处理器映射器，处理器适配器（与视图解析器并称为springmvc的三大组件）-->
    <!--conversion-service : 关联自定义转换器-->
    <mvc:annotation-driven conversion-service="conversionServiceFactoryBean"/>

    <!--静态资源配置，方案一-->
    <!--
    原理：添加该标签之后，会在springmvc上下文中定义一个DefaultServletHttpRequestHandler对象
         这个对象如同一个检查人员，对DispatcherServlet的url请求进行过滤筛查，如果发现是一个静态资源请求，
         那么会把请求转由web应用服务器（tomcat）默认的DefaultServlet进行处理，如果不是静态资源请求，那么继续由Springmvc框架处理
    局限：此方法只能把静态资源放在webapp目录下（即静态资源上级目录为webapp）
    -->
    <mvc:default-servlet-handler />

    <!--静态资源配置，方案二:springmvc框架自己处理静态资源
            location:指定的静态资源存放的位置，可以配置多个路径：如还想同时访问webapp下的Test.html，可以配置多个路径，用逗号隔开
            如location="/,classpath:/"
            mapping:约定的静态资源的Url规则
    -->

    <!--以 把html文件放在resources目录下为例-->
    <!--访问路径：http://localhost:8081/resources/Test.html-->
    <mvc:resources location="classpath:/" mapping="/resources/**"  />
    <!--js静态资源配置-->
    <mvc:resources location="/WEB-INF/js/" mapping="/js/**"  />

    <!--注册自定义类型转换器-->
    <!--在上面 <mvc:annotation-driven conversion-service="conversionServiceFactoryBean"/>标签中关联-->
    <bean id="conversionServiceFactoryBean" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="com.lagou.convert.DateConverter"></bean>
            </set>
        </property>
    </bean>


    <!--注册拦截器-->
    <mvc:interceptors>
        <!--下方配置代表拦截所有handler-->
        <!--<bean class="com.lagou.interceptor.MyInterceptor01"/>-->

        <mvc:interceptor>
            <!--/** 代表拦截根目录及其子目录，即所有目录-->
            <mvc:mapping path="/**"/>
            <!--代表排除拦截demo目录及demo子目录下所有handler-->
            <!--<mvc:exclude-mapping path="/demo/**"/>-->
            <!--配置拦截器-->
            <bean class="com.lagou.interceptor.MyInterceptor01"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.lagou.interceptor.MyInterceptor02"/>
        </mvc:interceptor>
    </mvc:interceptors>


    <!--多元素解析器（文件上传解析器）-->
    <!--id固定为multipartResolver-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--设置文件上传大小上限，单位是字节，-1代表没有限制，默认值-1 -->
        <property name="maxUploadSize" value="5000000" />
    </bean>
</beans>


